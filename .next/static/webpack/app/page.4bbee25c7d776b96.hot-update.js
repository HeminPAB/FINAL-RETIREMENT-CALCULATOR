"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/lib/pdfGenerator.js":
/*!*********************************!*\
  !*** ./app/lib/pdfGenerator.js ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateRetirementReport: function() { return /* binding */ generateRetirementReport; }\n/* harmony export */ });\n/* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jspdf */ \"(app-pages-browser)/./node_modules/jspdf/dist/jspdf.es.min.js\");\n/* harmony import */ var jspdf_autotable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jspdf-autotable */ \"(app-pages-browser)/./node_modules/jspdf-autotable/dist/jspdf.plugin.autotable.mjs\");\n\n\nconst generateRetirementReport = (formData, calculations)=>{\n    var _formData_expectedReturnType, _formData_expectedReturnType1;\n    const doc = new jspdf__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n    // Helper function to format currency\n    const formatCurrency = (value)=>{\n        if (value >= 1000000) {\n            return \"$\".concat((value / 1000000).toFixed(1), \"M\");\n        } else if (value >= 1000) {\n            return \"$\".concat((value / 1000).toFixed(0), \"K\");\n        } else {\n            return \"$\".concat(Math.round(value).toLocaleString());\n        }\n    };\n    const formatFullCurrency = (value)=>{\n        return \"$\".concat(Math.round(value).toLocaleString());\n    };\n    // Extract calculations\n    const { currentAge, retirementAge, yearsToRetirement, currentAnnualIncome, incomeGrowthRate, incomeReplacementRatio, targetMonthlyRetirementIncome, monthlyGovernmentBenefits, netRequiredMonthlyWithdrawal, currentSavings, monthlyContributions, expectedReturn, projectedSavings, monthlyIncomeFromSavings } = calculations;\n    // PAGE 1: SUMMARY\n    doc.setFontSize(20);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Retirement Planning Report\", 20, 30);\n    doc.setFontSize(12);\n    doc.setTextColor(100, 100, 100);\n    doc.text(\"Generated on \".concat(new Date().toLocaleDateString()), 20, 40);\n    // Personal Information Section\n    doc.setFontSize(16);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Personal Information\", 20, 60);\n    doc.setFontSize(11);\n    doc.setTextColor(60, 60, 60);\n    const personalInfo = [\n        [\n            \"Current Age:\",\n            \"\".concat(currentAge, \" years\")\n        ],\n        [\n            \"Retirement Age:\",\n            \"\".concat(retirementAge, \" years\")\n        ],\n        [\n            \"Years to Retirement:\",\n            \"\".concat(yearsToRetirement, \" years\")\n        ],\n        [\n            \"Current Annual Income:\",\n            formatFullCurrency(currentAnnualIncome)\n        ],\n        [\n            \"Income Growth Rate:\",\n            \"\".concat((incomeGrowthRate * 100).toFixed(1), \"%\")\n        ]\n    ];\n    let yPos = 70;\n    personalInfo.forEach((param)=>{\n        let [label, value] = param;\n        doc.text(label, 25, yPos);\n        doc.text(value, 120, yPos);\n        yPos += 8;\n    });\n    // Retirement Goals Section\n    doc.setFontSize(16);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Retirement Goals\", 20, yPos + 10);\n    doc.setFontSize(11);\n    doc.setTextColor(60, 60, 60);\n    yPos += 20;\n    const retirementGoals = [\n        [\n            \"Income Replacement Target:\",\n            \"\".concat(Math.round(incomeReplacementRatio), \"%\")\n        ],\n        [\n            \"Target Monthly Retirement Income:\",\n            formatFullCurrency(targetMonthlyRetirementIncome)\n        ],\n        [\n            \"Monthly Government Benefits:\",\n            formatFullCurrency(monthlyGovernmentBenefits)\n        ],\n        [\n            \"Required Monthly Withdrawal:\",\n            formatFullCurrency(netRequiredMonthlyWithdrawal)\n        ]\n    ];\n    retirementGoals.forEach((param)=>{\n        let [label, value] = param;\n        doc.text(label, 25, yPos);\n        doc.text(value, 120, yPos);\n        yPos += 8;\n    });\n    // Current Financial Position Section\n    doc.setFontSize(16);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Current Financial Position\", 20, yPos + 10);\n    doc.setFontSize(11);\n    doc.setTextColor(60, 60, 60);\n    yPos += 20;\n    const currentPosition = [\n        [\n            \"Current Total Savings:\",\n            formatFullCurrency(currentSavings)\n        ],\n        [\n            \"Monthly Contributions:\",\n            formatFullCurrency(monthlyContributions)\n        ],\n        [\n            \"Expected Return:\",\n            \"\".concat((expectedReturn * 100).toFixed(1), \"%\")\n        ],\n        [\n            \"Investment Risk Profile:\",\n            ((_formData_expectedReturnType = formData.expectedReturnType) === null || _formData_expectedReturnType === void 0 ? void 0 : _formData_expectedReturnType.charAt(0).toUpperCase()) + ((_formData_expectedReturnType1 = formData.expectedReturnType) === null || _formData_expectedReturnType1 === void 0 ? void 0 : _formData_expectedReturnType1.slice(1)) || \"Not specified\"\n        ]\n    ];\n    currentPosition.forEach((param)=>{\n        let [label, value] = param;\n        doc.text(label, 25, yPos);\n        doc.text(value, 120, yPos);\n        yPos += 8;\n    });\n    // Projection Results Section\n    doc.setFontSize(16);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Projection Results\", 20, yPos + 10);\n    doc.setFontSize(11);\n    doc.setTextColor(60, 60, 60);\n    yPos += 20;\n    const projectionResults = [\n        [\n            \"Projected Savings at Retirement:\",\n            formatCurrency(projectedSavings)\n        ],\n        [\n            \"Monthly Income from Savings:\",\n            formatFullCurrency(monthlyIncomeFromSavings)\n        ],\n        [\n            \"Total Monthly Retirement Income:\",\n            formatFullCurrency(monthlyIncomeFromSavings + monthlyGovernmentBenefits)\n        ],\n        [\n            \"Sustainability Rate:\",\n            \"\".concat(Math.min(100, Math.max(0, monthlyIncomeFromSavings / netRequiredMonthlyWithdrawal * 100)).toFixed(1), \"%\")\n        ]\n    ];\n    projectionResults.forEach((param)=>{\n        let [label, value] = param;\n        doc.text(label, 25, yPos);\n        doc.text(value, 120, yPos);\n        yPos += 8;\n    });\n    // PAGE 2: PRE-RETIREMENT PROJECTIONS\n    doc.addPage();\n    doc.setFontSize(20);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Year-by-Year Projections\", 20, 30);\n    doc.setFontSize(14);\n    doc.text(\"Pre-Retirement Phase\", 20, 45);\n    // Generate year-by-year data for pre-retirement\n    const preRetirementData = [];\n    const currentYear = new Date().getFullYear();\n    for(let i = 0; i <= yearsToRetirement; i++){\n        const year = currentYear + i;\n        const age = currentAge + i;\n        const annualIncome = currentAnnualIncome * Math.pow(1 + incomeGrowthRate, i);\n        // Calculate year-end balance with compound interest\n        let yearEndBalance = 0;\n        let investmentReturn = 0;\n        if (i === 0) {\n            investmentReturn = currentSavings * expectedReturn;\n            yearEndBalance = currentSavings * (1 + expectedReturn) + monthlyContributions * 12;\n        } else {\n            // Previous year's balance - need to extract numeric value from formatted string\n            const prevBalanceStr = preRetirementData[i - 1][5];\n            const prevBalance = parseFloat(prevBalanceStr.replace(/[$,]/g, \"\"));\n            investmentReturn = prevBalance * expectedReturn;\n            yearEndBalance = prevBalance * (1 + expectedReturn) + monthlyContributions * 12;\n        }\n        preRetirementData.push([\n            year,\n            age,\n            formatFullCurrency(annualIncome),\n            formatFullCurrency(monthlyContributions * 12),\n            formatFullCurrency(investmentReturn),\n            formatFullCurrency(yearEndBalance)\n        ]);\n    }\n    // Create table for pre-retirement projections\n    doc.autoTable({\n        head: [\n            [\n                \"Year\",\n                \"Age\",\n                \"Annual Income\",\n                \"Annual Contribution\",\n                \"Investment Return\",\n                \"Year-End Balance\"\n            ]\n        ],\n        body: preRetirementData,\n        startY: 55,\n        theme: \"grid\",\n        headStyles: {\n            fillColor: [\n                41,\n                128,\n                185\n            ],\n            textColor: 255,\n            fontSize: 10\n        },\n        bodyStyles: {\n            fontSize: 9\n        },\n        columnStyles: {\n            0: {\n                cellWidth: 25\n            },\n            1: {\n                cellWidth: 25\n            },\n            2: {\n                cellWidth: 35\n            },\n            3: {\n                cellWidth: 35\n            },\n            4: {\n                cellWidth: 35\n            },\n            5: {\n                cellWidth: 35\n            }\n        }\n    });\n    // PAGE 3: POST-RETIREMENT WITHDRAWALS\n    doc.addPage();\n    doc.setFontSize(20);\n    doc.setTextColor(40, 40, 40);\n    doc.text(\"Post-Retirement Withdrawals\", 20, 30);\n    doc.setFontSize(14);\n    doc.text(\"Retirement Phase (Age 70-95)\", 20, 45);\n    // Generate post-retirement withdrawal data\n    const postRetirementData = [];\n    let remainingBalance = projectedSavings;\n    const annualWithdrawal = netRequiredMonthlyWithdrawal * 12;\n    const monthlyWithdrawal = netRequiredMonthlyWithdrawal;\n    for(let age = retirementAge; age <= 95; age++){\n        const year = currentYear + (age - currentAge);\n        // Calculate balance after withdrawal and growth\n        const balanceAfterWithdrawal = Math.max(0, remainingBalance - annualWithdrawal);\n        const growthOnRemainingBalance = balanceAfterWithdrawal * expectedReturn;\n        const yearEndBalance = balanceAfterWithdrawal + growthOnRemainingBalance;\n        postRetirementData.push([\n            year,\n            age,\n            formatFullCurrency(annualWithdrawal),\n            formatFullCurrency(monthlyWithdrawal),\n            formatFullCurrency(growthOnRemainingBalance),\n            formatFullCurrency(yearEndBalance)\n        ]);\n        remainingBalance = yearEndBalance;\n        // Stop if balance reaches zero\n        if (remainingBalance <= 0) break;\n    }\n    // Create table for post-retirement withdrawals\n    doc.autoTable({\n        head: [\n            [\n                \"Year\",\n                \"Age\",\n                \"Annual Withdrawal\",\n                \"Monthly Withdrawal\",\n                \"Investment Growth\",\n                \"Year-End Balance\"\n            ]\n        ],\n        body: postRetirementData,\n        startY: 55,\n        theme: \"grid\",\n        headStyles: {\n            fillColor: [\n                231,\n                76,\n                60\n            ],\n            textColor: 255,\n            fontSize: 10\n        },\n        bodyStyles: {\n            fontSize: 9\n        },\n        columnStyles: {\n            0: {\n                cellWidth: 25\n            },\n            1: {\n                cellWidth: 25\n            },\n            2: {\n                cellWidth: 35\n            },\n            3: {\n                cellWidth: 35\n            },\n            4: {\n                cellWidth: 35\n            },\n            5: {\n                cellWidth: 35\n            }\n        }\n    });\n    // Add footer to all pages\n    const pageCount = doc.internal.getNumberOfPages();\n    for(let i = 1; i <= pageCount; i++){\n        doc.setPage(i);\n        doc.setFontSize(8);\n        doc.setTextColor(150, 150, 150);\n        doc.text(\"Page \".concat(i, \" of \").concat(pageCount), 20, 285);\n        doc.text(\"This report is for illustrative purposes only and should not be considered as financial advice.\", 20, 292);\n    }\n    // Save the PDF\n    doc.save(\"retirement-planning-report.pdf\");\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/lib/pdfGenerator.js\n"));

/***/ })

});